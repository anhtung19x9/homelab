keycloak:
  auth:
    adminUser: admin
    adminPassword: "Vmo@2024admin"
  adminRealm: "master"
  production: false
  replicaCount: 1
  containerPorts:
    http: 8080
    https: 8443
  resourcesPreset: "small"
  service:
    type: ClusterIP
    http:
      enabled: true
    ports:
      http: 80
      https: 443
  ingress:
    enabled: true
    ingressClassName: "nginx"
    hostname: keycloak.vmogroup.online
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
    tls: true
  adminIngress:
    enabled: true
    ingressClassName: "nginx"
    hostname: admin.keycloak.vmogroup.online
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
    tls: true
  keycloakConfigCli:
    ## @param keycloakConfigCli.enabled Whether to enable keycloak-config-cli job
    ##
    enabled: false
    ## Bitnami keycloak-config-cli image
    ## ref: https://hub.docker.com/r/bitnami/keycloak-config-cli/tags/
    ## @param keycloakConfigCli.image.registry [default: REGISTRY_NAME] keycloak-config-cli container image registry
    ## @param keycloakConfigCli.image.repository [default: REPOSITORY_NAME/keycloak-config-cli] keycloak-config-cli container image repository
    ## @skip keycloakConfigCli.image.tag keycloak-config-cli container image tag
    ## @param keycloakConfigCli.image.digest keycloak-config-cli container image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param keycloakConfigCli.image.pullPolicy keycloak-config-cli container image pull policy
    ## @param keycloakConfigCli.image.pullSecrets keycloak-config-cli container image pull secrets
    ##
    image:
      registry: docker.io
      repository: bitnami/keycloak-config-cli
      tag: 6.1.6-debian-12-r0
      digest: ""
      ## Specify a imagePullPolicy
      ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
      ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
      ##
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## @param keycloakConfigCli.annotations [object] Annotations for keycloak-config-cli job
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    annotations:
      helm.sh/hook: "post-install,post-upgrade,post-rollback"
      helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
      helm.sh/hook-weight: "5"
    ## @param keycloakConfigCli.command Command for running the container (set to default if not set). Use array form
    ##
    command: []
    ## @param keycloakConfigCli.args Args for running the container (set to default if not set). Use array form
    ##
    args: []
    ## @param keycloakConfigCli.automountServiceAccountToken Mount Service Account token in pod
    ##
    automountServiceAccountToken: true
    ## @param keycloakConfigCli.hostAliases Job pod host aliases
    ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
    ##
    hostAliases: []
    ## Keycloak config CLI resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## @param keycloakConfigCli.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if keycloakConfigCli.resources is set (keycloakConfigCli.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "small"
    ## @param keycloakConfigCli.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}
    ## keycloak-config-cli containers' Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ## @param keycloakConfigCli.containerSecurityContext.enabled Enabled keycloak-config-cli Security Context
    ## @param keycloakConfigCli.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param keycloakConfigCli.containerSecurityContext.runAsUser Set keycloak-config-cli Security Context runAsUser
    ## @param keycloakConfigCli.containerSecurityContext.runAsGroup Set keycloak-config-cli Security Context runAsGroup
    ## @param keycloakConfigCli.containerSecurityContext.runAsNonRoot Set keycloak-config-cli Security Context runAsNonRoot
    ## @param keycloakConfigCli.containerSecurityContext.privileged Set keycloak-config-cli Security Context privileged
    ## @param keycloakConfigCli.containerSecurityContext.readOnlyRootFilesystem Set keycloak-config-cli Security Context readOnlyRootFilesystem
    ## @param keycloakConfigCli.containerSecurityContext.allowPrivilegeEscalation Set keycloak-config-cli Security Context allowPrivilegeEscalation
    ## @param keycloakConfigCli.containerSecurityContext.capabilities.drop List of capabilities to be dropped
    ## @param keycloakConfigCli.containerSecurityContext.seccompProfile.type Set keycloak-config-cli Security Context seccomp profile
    ##
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      privileged: false
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
    ## keycloak-config-cli pods' Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param keycloakConfigCli.podSecurityContext.enabled Enabled keycloak-config-cli pods' Security Context
    ## @param keycloakConfigCli.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
    ## @param keycloakConfigCli.podSecurityContext.sysctls Set kernel settings using the sysctl interface
    ## @param keycloakConfigCli.podSecurityContext.supplementalGroups Set filesystem extra groups
    ## @param keycloakConfigCli.podSecurityContext.fsGroup Set keycloak-config-cli pod's Security Context fsGroup
    ##
    podSecurityContext:
      enabled: true
      fsGroupChangePolicy: Always
      sysctls: []
      supplementalGroups: []
      fsGroup: 1001
    ## @param keycloakConfigCli.backoffLimit Number of retries before considering a Job as failed
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-backoff-failure-policy
    ##
    backoffLimit: 1
    ## @param keycloakConfigCli.podLabels Pod extra labels
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    ##
    podLabels: {}
    ## @param keycloakConfigCli.podAnnotations Annotations for job pod
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    podAnnotations: {}
    ## @param keycloakConfigCli.extraEnvVars Additional environment variables to set
    ## Example:
    ## extraEnvVars:
    ##   - name: FOO
    ##     value: "bar"
    ##
    ## @param keycloakConfigCli.nodeSelector Node labels for pod assignment
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
    ##
    nodeSelector: {}
    ##
    ## @param keycloakConfigCli.podTolerations Tolerations for job pod assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    podTolerations: []
    extraEnvVars: []
    ## @param keycloakConfigCli.extraEnvVarsCM ConfigMap with extra environment variables
    ##
    extraEnvVarsCM: ""
    ## @param keycloakConfigCli.extraEnvVarsSecret Secret with extra environment variables
    ##
    extraEnvVarsSecret: ""
    ## @param keycloakConfigCli.extraVolumes Extra volumes to add to the job
    ##
    extraVolumes: []
    ## @param keycloakConfigCli.extraVolumeMounts Extra volume mounts to add to the container
    ##
    extraVolumeMounts: []
    ## @param keycloakConfigCli.initContainers Add additional init containers to the Keycloak config cli pod
    ## Example:
    ## initContainers:
    ##   - name: your-image-name
    ##     image: your-image
    ##     imagePullPolicy: Always
    ##     ports:
    ##       - name: portname
    ##         containerPort: 1234
    ##
    initContainers: []
    ## @param keycloakConfigCli.sidecars Add additional sidecar containers to the Keycloak config cli pod
    ## Example:
    ## sidecars:
    ##   - name: your-image-name
    ##     image: your-image
    ##     imagePullPolicy: Always
    ##     ports:
    ##       - name: portname
    ##         containerPort: 1234
    ##
    sidecars: []
    ## @param keycloakConfigCli.configuration keycloak-config-cli realms configuration
    ## NOTE: nil keys will be considered files to import locally
    ## Example:
    ## configuration:
    ##   realm1.json: |
    ##     {
    ##       "realm": "realm1",
    ##       "clients": []
    ##     }
    ##   realm2.yaml: |
    ##     realm: realm2
    ##     clients: []
    ##
    configuration: {}
    ## @param keycloakConfigCli.existingConfigmap ConfigMap with keycloak-config-cli configuration
    ## NOTE: This will override keycloakConfigCli.configuration
    ##
    existingConfigmap: ""
    ## Automatic Cleanup for Finished Jobs
    ## @param keycloakConfigCli.cleanupAfterFinished.enabled Enables Cleanup for Finished Jobs
    ## @param keycloakConfigCli.cleanupAfterFinished.seconds Sets the value of ttlSecondsAfterFinished
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/ttlafterfinished/
    ##
    cleanupAfterFinished:
      enabled: false
      seconds: 600
  postgresql:
    enabled: true
    auth:
      postgresPassword: "Vmo@2024database"
      username: bn_keycloak
      password: "Vmo@2024database"
      database: bitnami_keycloak
    architecture: standalone
  logging:
    output: default
    level: DEBUG

